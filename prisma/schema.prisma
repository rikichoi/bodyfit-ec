// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url = env("POSTGRES_PRISMA_URL") // uses connection pooling

  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Discount {
  id               Int       @id @default(autoincrement())
  name             String
  description      String
  discount_percent Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Product          Product[]

  @@map("discounts")
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[]

  @@map("product_categories")
}

model Product {
  id       Int    @id @default(autoincrement())
  name     String
  price    Int
  stockQty Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discountId       Int?
  Discount         Discount?        @relation(fields: [discountId], references: [id], onDelete: Cascade)
  prodctCategoryId Int
  ProductCategory  ProductCategory @relation(fields: [prodctCategoryId], references: [id], onDelete: Cascade)
  CartItem         CartItem[]

  @@map("products")
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CartItem CartItem[]
  userId   String?
  User     User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  qty       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartId    Int
  Cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
